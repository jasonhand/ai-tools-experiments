---
import MainLayout from '../layouts/MainLayout.astro';
import { getAllEpisodes, getAllTags } from '../utils/episodes';

// Get all episodes and extract takeaways
const allEpisodes = await getAllEpisodes();

// Create episode data with takeaways for observations
const episodesWithTakeaways = allEpisodes.map(episode => ({
    ...episode,
    takeaways: [
        // These would ideally come from the MDX content, but for now we'll use placeholder takeaways
        // In a real implementation, you'd extract these from the episode content
        `Episode ${episode.number} explores ${episode.tags.slice(0, 2).join(' and ')} technologies`,
        `Demonstrates practical applications of ${episode.tags[0] || 'AI tools'} in development workflows`,
        `Provides insights into modern developer productivity and tool adoption`,
        `Shows real-world examples of AI-assisted development processes`
    ]
}));

// Get unique tools for filters
const allTools = getAllTags(allEpisodes);
---

<MainLayout title="Observations & Insights">
    <main class="container about-section">
        <div class="about-header">
            <h1>Observations & Insights</h1>
            <p>Discover patterns, insights, and key takeaways from our AI tools exploration journey. Filter by tools, technologies, or concepts to focus on specific areas of interest.</p>
        </div>
        
        <!-- Mobile search section -->
        <div class="mobile-search-section">
            <div class="filter-group">
                <h3>Search</h3>
                <input type="text" class="filter-search" placeholder="Search takeaways..." id="search-input">
            </div>
        </div>
        
        <div class="observations-layout">
            <!-- Sidebar with filters -->
            <div class="observations-sidebar">
                <div class="filter-group desktop-search">
                    <h3>Search</h3>
                    <input type="text" class="filter-search" placeholder="Search takeaways..." id="search-input-desktop">
                </div>
                
                <div class="filter-group">
                    <h3>Tools & Technologies</h3>
                    <div class="filters-container" id="tools-filters">
                        {allTools.map(tool => (
                            <div class="filter-item" data-filter="tool" data-value={tool.toLowerCase()}>
                                <span>{tool}</span>
                                <span class="count">{episodesWithTakeaways.filter(ep => ep.tags.some(t => t.toLowerCase() === tool.toLowerCase())).length}</span>
                            </div>
                        ))}
                    </div>
                </div>
                
                <button class="reset-filters" id="reset-filters">Reset All Filters</button>
            </div>
            
            <!-- Main content area -->
            <div class="observations-content">
                <div class="takeaway-cards" id="takeaway-cards">
                    {episodesWithTakeaways.map(episode => (
                        <div class="takeaway-card" 
                             data-episode={episode.number} 
                             data-tools={episode.tags.map(t => t.toLowerCase()).join(',')} 
                             data-concepts={episode.tags.map(c => c.toLowerCase()).join(',')}>
                            <div class="takeaway-card-header">
                                <a href={`/episodes/ep${episode.number}`} class="header-link">
                                    <img src={episode.heroImg} alt={`Episode ${episode.number} Thumbnail`}>
                                    <div class="takeaway-card-header-content">
                                        <div class="episode-number">Episode {episode.number}</div>
                                        <h3>{episode.title}</h3>
                                    </div>
                                </a>
                            </div>
                            <div class="takeaway-card-body">
                                <div class="takeaway-card-tags">
                                    {episode.tags.map(tag => (
                                        <span class="takeaway-tag">{tag}</span>
                                    ))}
                                </div>
                                <div class="takeaway-content">
                                    <ul>
                                        {episode.takeaways.map(takeaway => (
                                            <li>{takeaway}</li>
                                        ))}
                                    </ul>
                                </div>
                            </div>
                            <div class="takeaway-card-footer">
                                <a href={`/episodes/ep${episode.number}`} target='_blank'>View Full Episode â†’</a>
                            </div>
                        </div>
                    ))}
                </div>
                
                <!-- Empty state for when no results match filters -->
                <div class="empty-state" id="empty-state" style="display: none;">
                    <h3>No takeaways found</h3>
                    <p>Try adjusting your filters or search terms to find relevant insights.</p>
                </div>
            </div>
        </div>
        
        <!-- Mobile filters section at bottom -->
        <div class="mobile-filters-section">
            <div class="filter-group">
                <h3>Tools & Technologies</h3>
                <div class="filters-container" id="tools-filters-mobile">
                    {allTools.map(tool => (
                        <div class="filter-item" data-filter="tool" data-value={tool.toLowerCase()}>
                            <span>{tool}</span>
                            <span class="count">{episodesWithTakeaways.filter(ep => ep.tags.some(t => t.toLowerCase() === tool.toLowerCase())).length}</span>
                        </div>
                    ))}
                </div>
            </div>
            
            <button class="reset-filters" id="reset-filters-mobile">Reset All Filters</button>
        </div>
    </main>
</MainLayout>

<style>
    /* Main layout improvements */
    .observations-layout {
        display: grid;
        grid-template-columns: 260px 1fr;
        gap: 30px;
        position: relative;
    }
    
    /* Sidebar styling */
    .observations-sidebar {
        position: sticky;
        top: 20px;
        height: calc(100vh - 100px);
        overflow-y: auto;
        padding-right: 15px;
        scrollbar-width: thin;
    }
    
    .observations-sidebar::-webkit-scrollbar {
        width: 6px;
    }
    
    .observations-sidebar::-webkit-scrollbar-thumb {
        background-color: #ddd;
        border-radius: 6px;
    }
    
    .observations-content {
        min-height: 500px;
    }
    
    /* Filter group styling */
    .filter-group {
        margin-bottom: 25px;
        background: #f8f9ff;
        border-radius: 12px;
        padding: 15px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }
    
    .filter-group h3 {
        margin-top: 0;
        margin-bottom: 12px;
        font-size: 1rem;
        color: #333;
        border-bottom: 1px solid #e5e7eb;
        padding-bottom: 8px;
    }
    
    /* Tool filters */
    .filters-container {
        display: flex;
        flex-direction: column;
        gap: 8px;
        max-height: 300px;
        overflow-y: auto;
        padding-right: 5px;
    }
    
    .filter-item {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 10px;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 0.9rem;
    }
    
    .filter-item:hover {
        background-color: #f0f0ff;
    }
    
    .filter-item.active {
        background-color: #e6e6ff;
        font-weight: 500;
    }
    
    .filter-item .count {
        margin-left: auto;
        background-color: #e2e2fe;
        border-radius: 12px;
        padding: 2px 8px;
        font-size: 0.75rem;
        color: #4f46e5;
    }
    
    /* Search styling */
    .filter-search {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ddd;
        border-radius: 6px;
        margin-bottom: 10px;
        font-size: 0.9rem;
    }
    
    .filter-search:focus {
        outline: none;
        border-color: #7c4dff;
        box-shadow: 0 0 0 2px rgba(124, 77, 255, 0.2);
    }
    
    /* Reset filters button */
    .reset-filters {
        display: block;
        width: 100%;
        padding: 8px;
        background-color: #f8f8f8;
        border: 1px solid #e0e0e0;
        border-radius: 6px;
        text-align: center;
        margin-top: 10px;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 0.9rem;
    }
    
    .reset-filters:hover {
        background-color: #e8e8e8;
    }
    
    /* Takeaway cards styling */
    .takeaway-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
    }
    
    .takeaway-card {
        background-color: #fff;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        height: 100%;
        display: flex;
        flex-direction: column;
    }
    
    .takeaway-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
    }
    
    .takeaway-card-header {
        height: 140px;
        position: relative;
        overflow: hidden;
    }
    
    .takeaway-card-header .header-link {
        display: block;
        width: 100%;
        height: 100%;
        text-decoration: none;
        color: inherit;
        cursor: pointer;
    }
    
    .takeaway-card-header img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }
    
    .takeaway-card:hover .takeaway-card-header img {
        transform: scale(1.05);
    }
    
    .takeaway-card-header-content {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        padding: 12px 16px;
        background: linear-gradient(0deg, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%);
        color: white;
    }
    
    .takeaway-card-header h3 {
        margin: 0;
        font-size: 1rem;
        font-weight: 600;
        text-shadow: 0 1px 2px rgba(0,0,0,0.5);
    }
    
    .takeaway-card-header .episode-number {
        font-size: 0.8rem;
        margin-bottom: 4px;
        text-shadow: 0 1px 2px rgba(0,0,0,0.5);
    }
    
    .takeaway-card-body {
        padding: 16px;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }
    
    .takeaway-card-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 6px;
        margin-bottom: 12px;
    }
    
    .takeaway-tag {
        background-color: #f0f0ff;
        color: #4f46e5;
        font-size: 0.75rem;
        padding: 3px 8px;
        border-radius: 12px;
    }
    
    .takeaway-content {
        flex-grow: 1;
    }
    
    .takeaway-content ul {
        padding-left: 5px;
        margin: 0;
        list-style-type: none;
    }
    
    .takeaway-content li {
        margin-bottom: 12px;
        font-size: 0.9rem;
        line-height: 1.5;
        position: relative;
        padding-left: 24px;
    }
    
    .takeaway-content li:before {
        content: "";
        position: absolute;
        left: 0;
        top: 5px;
        width: 10px;
        height: 10px;
        background-color: #7c4dff;
        border-radius: 50%;
        opacity: 0.8;
    }
    
    .takeaway-content li:hover:before {
        background-color: #6366f1;
        transform: scale(1.2);
        transition: all 0.2s ease;
    }
    
    .takeaway-card-footer {
        padding: 12px 16px;
        background-color: #f8f9ff;
        border-top: 1px solid #eee;
        text-align: right;
    }
    
    .takeaway-card-footer a {
        color: #4f46e5;
        text-decoration: none;
        font-size: 0.85rem;
        font-weight: 500;
    }
    
    .takeaway-card-footer a:hover {
        text-decoration: underline;
    }
    
    /* Empty state */
    .empty-state {
        text-align: center;
        padding: 40px 20px;
        background-color: #f8f9ff;
        border-radius: 12px;
        margin: 40px 0;
    }
    
    .empty-state h3 {
        margin-top: 0;
        color: #666;
    }
    
    .empty-state p {
        color: #888;
        max-width: 400px;
        margin: 0 auto;
    }
    
    /* Mobile search and filters sections */
    .mobile-search-section {
        display: none;
        margin-bottom: 20px;
    }
    
    .mobile-filters-section {
        display: none;
        margin-top: 30px;
        padding-top: 20px;
        border-top: 2px solid #e5e7eb;
    }
    
    .desktop-search {
        display: block;
    }
    
    /* Mobile responsive */
    @media (max-width: 768px) {
        /* Show mobile sections, hide desktop sidebar */
        .mobile-search-section {
            display: block;
        }
        
        .mobile-filters-section {
            display: block;
        }
        
        .observations-sidebar {
            display: none;
        }
        
        .observations-layout {
            grid-template-columns: 1fr;
        }
        
        .observations-content {
            margin-bottom: 0;
        }
        
        .takeaway-cards {
            grid-template-columns: 1fr;
        }
        
        /* Mobile search styling */
        .mobile-search-section .filter-group {
            margin-bottom: 0;
        }
        
        /* Mobile filters styling */
        .mobile-filters-section .filter-group {
            margin-bottom: 20px;
        }
        
        .mobile-filters-section .filters-container {
            max-height: 200px;
        }
    }
</style>

<script>
    // Filter functionality
    document.addEventListener('DOMContentLoaded', function() {
        const searchInputMobile = document.getElementById('search-input') as HTMLInputElement;
        const searchInputDesktop = document.getElementById('search-input-desktop') as HTMLInputElement;
        const filterItems = document.querySelectorAll('.filter-item');
        const takeawayCards = document.querySelectorAll('.takeaway-card') as NodeListOf<HTMLElement>;
        const emptyState = document.getElementById('empty-state') as HTMLElement;
        const resetButtonDesktop = document.getElementById('reset-filters') as HTMLElement;
        const resetButtonMobile = document.getElementById('reset-filters-mobile') as HTMLElement;
        
        let activeFilters = {
            search: '',
            tools: [] as string[]
        };
        
        // Search functionality for both inputs
        function handleSearchInput(value: string) {
            activeFilters.search = value.toLowerCase();
            // Sync both search inputs
            if (searchInputMobile && searchInputMobile.value !== value) {
                searchInputMobile.value = value;
            }
            if (searchInputDesktop && searchInputDesktop.value !== value) {
                searchInputDesktop.value = value;
            }
            filterCards();
        }
        
        searchInputMobile?.addEventListener('input', function() {
            handleSearchInput(this.value);
        });
        
        searchInputDesktop?.addEventListener('input', function() {
            handleSearchInput(this.value);
        });
        
        // Filter item clicks
        filterItems.forEach(item => {
            item.addEventListener('click', function() {
                const filterType = (this as HTMLElement).dataset.filter;
                const filterValue = (this as HTMLElement).dataset.value;
                
                // Toggle all matching filter items (desktop and mobile)
                const allMatchingItems = document.querySelectorAll(`[data-filter="${filterType}"][data-value="${filterValue}"]`);
                const isActive = this.classList.contains('active');
                
                allMatchingItems.forEach(matchingItem => {
                    if (isActive) {
                        matchingItem.classList.remove('active');
                    } else {
                        matchingItem.classList.add('active');
                    }
                });
                
                if (filterType === 'tool' && filterValue) {
                    if (!isActive) {
                        activeFilters.tools.push(filterValue);
                    } else {
                        activeFilters.tools = activeFilters.tools.filter(t => t !== filterValue);
                    }
                }
                
                filterCards();
            });
        });
        
        // Reset filters function
        function resetAllFilters() {
            activeFilters = { search: '', tools: [] };
            if (searchInputMobile) searchInputMobile.value = '';
            if (searchInputDesktop) searchInputDesktop.value = '';
            filterItems.forEach(item => item.classList.remove('active'));
            filterCards();
        }
        
        // Reset filters for both buttons
        resetButtonDesktop?.addEventListener('click', resetAllFilters);
        resetButtonMobile?.addEventListener('click', resetAllFilters);
        
        // Filter cards based on active filters
        function filterCards() {
            let visibleCount = 0;
            
            takeawayCards.forEach(card => {
                let shouldShow = true;
                
                // Search filter
                if (activeFilters.search) {
                    const cardText = card.textContent?.toLowerCase() || '';
                    if (!cardText.includes(activeFilters.search)) {
                        shouldShow = false;
                    }
                }
                
                // Tools filter
                if (activeFilters.tools.length > 0) {
                    const cardTools = (card.dataset.tools || '').split(',');
                    const hasMatchingTool = activeFilters.tools.some(tool => 
                        cardTools.some(cardTool => cardTool.includes(tool))
                    );
                    if (!hasMatchingTool) {
                        shouldShow = false;
                    }
                }
                
                if (shouldShow) {
                    card.style.display = 'flex';
                    visibleCount++;
                } else {
                    card.style.display = 'none';
                }
            });
            
            // Show/hide empty state
            if (emptyState) {
                if (visibleCount === 0) {
                    emptyState.style.display = 'block';
                } else {
                    emptyState.style.display = 'none';
                }
            }
        }
    });
</script> 