---
import MainLayout from '../layouts/MainLayout.astro';
import { getAllEpisodes, getAllTags } from '../utils/episodes';

// Get all episodes and extract takeaways
const allEpisodes = await getAllEpisodes();

// Create episode data with takeaways for observations
const episodesWithTakeaways = allEpisodes.map(episode => ({
    ...episode,
    takeaways: [
        // These would ideally come from the MDX content, but for now we'll use placeholder takeaways
        // In a real implementation, you'd extract these from the episode content
        `Episode ${episode.number} explores ${episode.tags.slice(0, 2).join(' and ')} technologies`,
        `Demonstrates practical applications of ${episode.tags[0] || 'AI tools'} in development workflows`,
        `Provides insights into modern developer productivity and tool adoption`,
        `Shows real-world examples of AI-assisted development processes`
    ]
}));

// Get unique tools for filters
const allTools = getAllTags(allEpisodes);
---

<MainLayout title="Observations & Insights">
    <main class="container about-section">
        

        
        <!-- Compact horizontal filters -->
        <div class="filters-bar">
            <div class="search-container">
                <input type="text" class="compact-search" placeholder="Search takeaways..." id="search-input-main">
            </div>
            
            <div class="tools-filter-container">
                <select class="tools-dropdown" id="tools-dropdown">
                    <option value="">All Tools & Technologies</option>
                    {allTools.map(tool => (
                        <option value={tool.toLowerCase()}>{tool} ({episodesWithTakeaways.filter(ep => ep.tags.some(t => t.toLowerCase() === tool.toLowerCase())).length})</option>
                    ))}
                </select>
            </div>
            
            <button class="reset-filters-compact" id="reset-filters-main">Reset</button>
        </div>

        <div class="observations-layout">
            <div class="observations-content">
                <div class="takeaway-cards" id="takeaway-cards">
                    {episodesWithTakeaways.map(episode => (
                        <div class="takeaway-card" 
                             data-episode={episode.number} 
                             data-tools={episode.tags.map(t => t.toLowerCase()).join(',')} 
                             data-concepts={episode.tags.map(c => c.toLowerCase()).join(',')}>
                            <div class="takeaway-card-header">
                                <a href={`/episodes/ep${episode.number}`} class="header-link">
                                    <img src={episode.heroImg} alt={`Episode ${episode.number} Thumbnail`}>
                                    <div class="takeaway-card-header-content">
                                        <div class="episode-number">Episode {episode.number}</div>
                                        <h3>{episode.title}</h3>
                                    </div>
                                </a>
                            </div>
                            <div class="takeaway-card-body">
                                <div class="takeaway-card-tags">
                                    {episode.tags.map(tag => (
                                        <span class="takeaway-tag">{tag}</span>
                                    ))}
                                </div>
                                <div class="takeaway-content">
                                    <ul>
                                        {episode.takeaways.map(takeaway => (
                                            <li>{takeaway}</li>
                                        ))}
                                    </ul>
                                </div>
                            </div>
                            <div class="takeaway-card-footer">
                                <a href={`/episodes/ep${episode.number}`} target='_blank'>View Full Episode â†’</a>
                            </div>
                        </div>
                    ))}
                </div>
                
                <!-- Empty state for when no results match filters -->
                <div class="empty-state" id="empty-state" style="display: none;">
                    <h3>No takeaways found</h3>
                    <p>Try adjusting your filters or search terms to find relevant insights.</p>
                </div>
            </div>
        </div>

    </main>
</MainLayout>

<style>
    /* Observations page container styling to match episode pages */
    .about-section {
        background-color: white;
        border-radius: 8px;
        padding: 2rem;
        box-shadow: var(--shadow);
        margin-top: -1rem;
        margin-bottom: 2rem;
        position: relative;
        max-width: 1200px;
        margin-left: auto;
        margin-right: auto;
    }
    
    /* Compact horizontal filters bar */
    .filters-bar {
        display: flex;
        gap: 1rem;
        align-items: center;
        background: linear-gradient(135deg, var(--light-color) 0%, var(--highlight-color) 30%, var(--accent-color) 100%);
        border-radius: 16px;
        padding: 1.5rem 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 8px 32px rgba(169, 211, 255, 0.2), 0 4px 16px rgba(169, 211, 255, 0.15);
        flex-wrap: wrap;
    }
    
    .search-container {
        flex: 1;
        min-width: 250px;
    }
    
    .compact-search {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 12px;
        font-size: 1rem;
        background: rgba(255, 255, 255, 0.9);
        color: var(--primary-color);
        backdrop-filter: blur(15px);
        transition: all 0.3s ease;
    }
    
    .compact-search:focus {
        outline: none;
        border-color: rgba(255, 255, 255, 0.8);
        box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.2);
        background: white;
    }
    
    .tools-filter-container {
        min-width: 200px;
    }
    
    .tools-dropdown {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 12px;
        font-size: 1rem;
        background: rgba(255, 255, 255, 0.9);
        color: var(--primary-color);
        backdrop-filter: blur(15px);
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .tools-dropdown:focus {
        outline: none;
        border-color: rgba(255, 255, 255, 0.8);
        box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.2);
        background: white;
    }
    
    .reset-filters-compact {
        padding: 0.75rem 1.5rem;
        background: rgba(255, 255, 255, 0.9);
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 12px;
        color: var(--primary-color);
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        backdrop-filter: blur(15px);
        white-space: nowrap;
    }
    
    .reset-filters-compact:hover {
        background: white;
        border-color: rgba(255, 255, 255, 0.8);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    
    /* Main layout improvements */
    .observations-layout {
        position: relative;
    }
    
    .observations-content {
        min-height: 500px;
    }
    

    
    /* Takeaway cards styling */
    .takeaway-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
    }
    
    .takeaway-card {
        background-color: #fff;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        height: 100%;
        display: flex;
        flex-direction: column;
    }
    
    .takeaway-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
    }
    
    .takeaway-card-header {
        height: 280px;
        position: relative;
        overflow: hidden;
    }
    
    .takeaway-card-header .header-link {
        display: block;
        width: 100%;
        height: 100%;
        text-decoration: none;
        color: inherit;
        cursor: pointer;
    }
    
    .takeaway-card-header img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }
    
    .takeaway-card:hover .takeaway-card-header img {
        transform: scale(1.05);
    }
    
    .takeaway-card-header-content {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        padding: 12px 16px;
        background: linear-gradient(0deg, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%);
        color: white;
    }
    
    .takeaway-card-header h3 {
        margin: 0;
        font-size: 1rem;
        font-weight: 600;
        text-shadow: 0 1px 2px rgba(0,0,0,0.5);
    }
    
    .takeaway-card-header .episode-number {
        font-size: 0.8rem;
        margin-bottom: 4px;
        text-shadow: 0 1px 2px rgba(0,0,0,0.5);
    }
    
    .takeaway-card-body {
        padding: 16px;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }
    
    .takeaway-card-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 6px;
        margin-bottom: 12px;
    }
    
    .takeaway-tag {
        background-color: #f0f0ff;
        color: #4f46e5;
        font-size: 0.75rem;
        padding: 3px 8px;
        border-radius: 12px;
    }
    
    .takeaway-content {
        flex-grow: 1;
    }
    
    .takeaway-content ul {
        padding-left: 5px;
        margin: 0;
        list-style-type: none;
    }
    
    .takeaway-content li {
        margin-bottom: 12px;
        font-size: 0.9rem;
        line-height: 1.5;
        position: relative;
        padding-left: 24px;
    }
    
    .takeaway-content li:before {
        content: "";
        position: absolute;
        left: 0;
        top: 5px;
        width: 10px;
        height: 10px;
        background-color: #7c4dff;
        border-radius: 50%;
        opacity: 0.8;
    }
    
    .takeaway-content li:hover:before {
        background-color: #6366f1;
        transform: scale(1.2);
        transition: all 0.2s ease;
    }
    
    .takeaway-card-footer {
        padding: 12px 16px;
        background-color: #f8f9ff;
        border-top: 1px solid #eee;
        text-align: right;
    }
    
    .takeaway-card-footer a {
        color: #4f46e5;
        text-decoration: none;
        font-size: 0.85rem;
        font-weight: 500;
    }
    
    .takeaway-card-footer a:hover {
        text-decoration: underline;
    }
    
    /* Empty state */
    .empty-state {
        text-align: center;
        padding: 40px 20px;
        background-color: #f8f9ff;
        border-radius: 12px;
        margin: 40px 0;
    }
    
    .empty-state h3 {
        margin-top: 0;
        color: #666;
    }
    
    .empty-state p {
        color: #888;
        max-width: 400px;
        margin: 0 auto;
    }
    
    /* Mobile responsive */
    @media (max-width: 768px) {
        .filters-bar {
            flex-direction: column;
            gap: 1rem;
            padding: 1.5rem;
        }
        
        .search-container,
        .tools-filter-container {
            min-width: auto;
            width: 100%;
        }
        
        .takeaway-cards {
            grid-template-columns: 1fr;
        }
    }
</style>

<script>
    // Filter functionality
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('search-input-main') as HTMLInputElement;
        const toolsDropdown = document.getElementById('tools-dropdown') as HTMLSelectElement;
        const takeawayCards = document.querySelectorAll('.takeaway-card') as NodeListOf<HTMLElement>;
        const emptyState = document.getElementById('empty-state') as HTMLElement;
        const resetButton = document.getElementById('reset-filters-main') as HTMLElement;
        
        let activeFilters = {
            search: '',
            tool: ''
        };
        
        // Search functionality
        searchInput?.addEventListener('input', function() {
            activeFilters.search = this.value.toLowerCase();
            filterCards();
        });
        
        // Tools dropdown functionality
        toolsDropdown?.addEventListener('change', function() {
            activeFilters.tool = this.value;
            filterCards();
        });
        
        // Reset filters function
        function resetAllFilters() {
            activeFilters = { search: '', tool: '' };
            if (searchInput) searchInput.value = '';
            if (toolsDropdown) toolsDropdown.value = '';
            filterCards();
        }
        
        // Reset button
        resetButton?.addEventListener('click', resetAllFilters);
        
        // Filter cards based on active filters
        function filterCards() {
            let visibleCount = 0;
            
            takeawayCards.forEach(card => {
                let shouldShow = true;
                
                // Search filter
                if (activeFilters.search) {
                    const cardText = card.textContent?.toLowerCase() || '';
                    if (!cardText.includes(activeFilters.search)) {
                        shouldShow = false;
                    }
                }
                
                // Tools filter
                if (activeFilters.tool) {
                    const cardTools = (card.dataset.tools || '').split(',');
                    const hasMatchingTool = cardTools.some(cardTool => 
                        cardTool.includes(activeFilters.tool)
                    );
                    if (!hasMatchingTool) {
                        shouldShow = false;
                    }
                }
                
                if (shouldShow) {
                    card.style.display = 'flex';
                    visibleCount++;
                } else {
                    card.style.display = 'none';
                }
            });
            
            // Show/hide empty state
            if (emptyState) {
                if (visibleCount === 0) {
                    emptyState.style.display = 'block';
                } else {
                    emptyState.style.display = 'none';
                }
            }
        }
    });
</script> 