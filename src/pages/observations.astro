---
import MainLayout from '../layouts/MainLayout.astro';

// Static episode data for now - this ensures the page works
const episodes = [
  {
    number: 31,
    title: "Building client-side URL-based state apps using Claude 4 and Lovable",
    heroImg: "/images/thumbnails/ep31.png",
    tags: ["Claude", "Lovable", "AI Development", "Developer Tools", "Productivity"],
    takeaways: [
      "AI tools can act as a 'second brain' for capturing fleeting ideas",
      "Free plans with limitations can spark creativity through constraints",
      "URL-based state management enables privacy-focused applications",
      "Rapid prototyping with AI tools reduces cognitive load and speeds iteration"
    ],
    tools: ["Claude", "Lovable", "AI Development", "Developer Tools", "Productivity"],
    concepts: ["URL State Management", "Privacy-First Design", "Rapid Prototyping", "AI-Assisted Development"],
    path: "/episodes/ep31"
  },  
  {
    number: 30,
    title: "Maximizing AI with Cursor: Building MCP Servers for Seamless Workflow",
    heroImg: "/images/thumbnails/ep30.png",
    tags: ["MCP", "Cursor", "AI Development", "Developer Tools", "Documentation"],
    takeaways: [
      "MCP servers can automate engineering journal creation from Git commits and AI chats",
      "Weekend 'vibe coding' can lead to solving real productivity problems",
      "AI tools work best when they support rather than replace human thinking",
      "Context preservation is crucial for effective AI-assisted development"
    ],
    tools: ["MCP", "Cursor", "AI Development", "Developer Tools", "Documentation"],
    concepts: ["Model Context Protocol", "Engineering Journals", "Automated Documentation", "Developer Productivity"],
    path: "/episodes/ep30"
  },
  {
    number: 29,
    title: "Exploring Gemini 2.5 Pro: A New AI Frontier", 
    heroImg: "/images/thumbnails/ep29.png",
    tags: ["Gemini", "AI Development", "Coding", "Visualization"],
    takeaways: [
      "Gemini 2.5 Pro offers impressive million token context window capabilities",
      "Context caching significantly aids in handling large projects",
      "AI models can create sophisticated educational content blending math and programming",
      "Speed of AI output generation continues to improve dramatically"
    ],
    tools: ["Gemini", "AI Development", "Coding", "Visualization"],
    concepts: ["Large Context Windows", "Context Caching", "Educational AI", "Mathematical Visualization"],
    path: "/episodes/ep29"
  },
  {
    number: 28,
    title: "Exploring eBPF with AI Tools: Insights and Applications",
    heroImg: "/images/thumbnails/ep28.png", 
    tags: ["eBPF", "ChatGPT", "GitHub Copilot", "System Monitoring"],
    takeaways: [
      "eBPF provides intimate control over operating system kernel functions",
      "AI tools can accelerate learning of complex technologies like eBPF",
      "Iterative development with multiple AI platforms improves code quality",
      "AI significantly expedites development by providing foundational code quickly"
    ],
    tools: ["eBPF", "ChatGPT", "GitHub Copilot", "System Monitoring"],
    concepts: ["Kernel Programming", "System Observability", "Security Monitoring", "AI-Assisted Learning"],
    path: "/episodes/ep28"
  },
  {
    number: 27,
    title: "Exploring Coding Efficiency: Utilizing Tmux and Claude Code for AI-Powered Ray Tracing",
    heroImg: "/images/thumbnails/ep27.png",
    tags: ["Tmux", "Claude Code", "Terminal", "Helix"],
    takeaways: [
      "Terminal multiplexers like Tmux enhance productivity in AI-assisted coding",
      "High-level prompts can guide AI to develop complex projects autonomously",
      "Thorough conceptual frameworks are essential before AI execution",
      "AI tools integrate seamlessly into existing developer workflows"
    ],
    tools: ["Tmux", "Claude Code", "Terminal", "Helix"],
    concepts: ["Terminal Multiplexing", "AI-Guided Development", "Ray Tracing", "Workflow Integration"],
    path: "/episodes/ep27"
  },
  {
    number: 26,
    title: "Automating Content Transformation with N8N and Generative AI",
    heroImg: "/images/thumbnails/ep26.png",
    tags: ["N8N", "Automation", "Airtable", "Workflow"],
    takeaways: [
      "N8N workflows can automate complex content transformation tasks",
      "AI agents can manipulate and enhance content systematically",
      "Automation tools bridge the gap between content creation and distribution",
      "Follow-up workflows can extract additional value from existing content"
    ],
    tools: ["N8N", "Automation", "Airtable", "Workflow"],
    concepts: ["Content Automation", "Workflow Design", "AI Agents", "Content Transformation"],
    path: "/episodes/ep26"
  },
  {
    number: 24,
    title: "Streamlining AI Report Analysis: Figma AI 2025 Insights",
    heroImg: "/images/thumbnails/ep24.png",
    tags: ["Claude", "State of AI", "Productivity"],
    takeaways: [
      "AI tools can efficiently summarize and analyze complex industry reports",
      "Claude Desktop excels at extracting meaningful insights from PDFs",
      "Comparing multiple reports provides comprehensive understanding of trends",
      "Auto-generated summaries require careful validation in professional settings"
    ],
    tools: ["Claude", "State of AI", "Productivity"],
    concepts: ["Report Analysis", "Trend Identification", "Information Synthesis", "Professional Validation"],
    path: "/episodes/ep24"
  },
  {
    number: 20,
    title: "YOLO Coding: Migrating from Static HTML to Astro with AI Tools",
    heroImg: "/images/thumbnails/ep20.png",
    tags: ["Puppeteer", "MCP", "Gemini", "Claude", "Astro"],
    takeaways: [
      "YOLO Mode coding can lead to successful large-scale migrations",
      "Multiple AI models with MCP tools provide complementary capabilities",
      "Visual context through screenshots improves AI understanding",
      "AI-assisted migrations require careful handling of complex assets"
    ],
    tools: ["Puppeteer", "MCP", "Gemini", "Claude", "Astro"],
    concepts: ["Site Migration", "Multimodal AI", "Visual Context", "Framework Conversion"],
    path: "/episodes/ep20"
  }
].sort((a, b) => b.number - a.number);

// Get unique tools for filters
const allTools = [...new Set(episodes.flatMap(ep => ep.tools))].sort();
---

<MainLayout title="Observations & Insights" hideEpisodesLink={true}>
    <main class="container about-section">
        <div class="about-header">
            <h1>Observations & Insights</h1>
            <p>Discover patterns, insights, and key takeaways from our AI tools exploration journey. Filter by tools, technologies, or concepts to focus on specific areas of interest.</p>
        </div>
        
        <!-- Mobile tab navigation for small screens -->
        <div class="mobile-tabs">
            <div class="mobile-tab active" data-view="takeaways">Takeaways</div>
        </div>
        
        <div class="observations-layout">
            <!-- Sidebar with filters -->
            <div class="observations-sidebar">
                <div class="filter-group">
                    <h3>Search</h3>
                    <input type="text" class="filter-search" placeholder="Search takeaways..." id="search-input">
                </div>
                
                <div class="filter-group">
                    <h3>Tools & Technologies</h3>
                    <div class="filters-container" id="tools-filters">
                        {allTools.map(tool => (
                            <div class="filter-item" data-filter="tool" data-value={tool.toLowerCase()}>
                                <span>{tool}</span>
                                <span class="count">{episodes.filter(ep => ep.tools.some(t => t.toLowerCase() === tool.toLowerCase())).length}</span>
                            </div>
                        ))}
                    </div>
                </div>
                
                <div class="filter-group">
                    <h3>Episodes</h3>
                    <div class="filters-container" id="episode-filters">
                        {episodes.map(episode => (
                            <div class="filter-item" data-filter="episode" data-value={episode.number.toString()}>
                                <span>Episode {episode.number}</span>
                                <span class="count">1</span>
                            </div>
                        ))}
                    </div>
                </div>
                
                <button class="reset-filters" id="reset-filters">Reset All Filters</button>
            </div>
            
            <!-- Main content area -->
            <div class="observations-content">
                <div class="takeaway-cards" id="takeaway-cards">
                    {episodes.map(episode => (
                        <div class="takeaway-card" 
                             data-episode={episode.number} 
                             data-tools={episode.tools.map(t => t.toLowerCase()).join(',')} 
                             data-concepts={episode.concepts.map(c => c.toLowerCase()).join(',')}>
                            <div class="takeaway-card-header">
                                <img src={episode.heroImg} alt={`Episode ${episode.number} Thumbnail`}>
                                <div class="takeaway-card-header-content">
                                    <div class="episode-number">Episode {episode.number}</div>
                                    <h3>{episode.title}</h3>
                                </div>
                            </div>
                            <div class="takeaway-card-body">
                                <div class="takeaway-card-tags">
                                    {episode.tags.map(tag => (
                                        <span class="takeaway-tag">{tag}</span>
                                    ))}
                                </div>
                                <div class="takeaway-content">
                                    <ul>
                                        {episode.takeaways.map(takeaway => (
                                            <li>{takeaway}</li>
                                        ))}
                                    </ul>
                                </div>
                            </div>
                            <div class="takeaway-card-footer">
                                <a href={episode.path} target='_blank'>View Full Episode →</a>
                            </div>
                        </div>
                    ))}
                </div>
                
                <!-- Empty state for when no results match filters -->
                <div class="empty-state" id="empty-state" style="display: none;">
                    <h3>No takeaways found</h3>
                    <p>Try adjusting your filters or search terms to find relevant insights.</p>
                </div>
            </div>
        </div>
    </main>
</MainLayout>

<style>
    /* Main layout improvements */
    .observations-layout {
        display: grid;
        grid-template-columns: 260px 1fr;
        gap: 30px;
        position: relative;
    }
    
    /* Sidebar styling */
    .observations-sidebar {
        position: sticky;
        top: 20px;
        height: calc(100vh - 100px);
        overflow-y: auto;
        padding-right: 15px;
        scrollbar-width: thin;
    }
    
    .observations-sidebar::-webkit-scrollbar {
        width: 6px;
    }
    
    .observations-sidebar::-webkit-scrollbar-thumb {
        background-color: #ddd;
        border-radius: 6px;
    }
    
    .observations-content {
        min-height: 500px;
    }
    
    /* Filter group styling */
    .filter-group {
        margin-bottom: 25px;
        background: #f8f9ff;
        border-radius: 12px;
        padding: 15px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }
    
    .filter-group h3 {
        margin-top: 0;
        margin-bottom: 12px;
        font-size: 1rem;
        color: #333;
        border-bottom: 1px solid #e5e7eb;
        padding-bottom: 8px;
    }
    
    /* Tool filters */
    .filters-container {
        display: flex;
        flex-direction: column;
        gap: 8px;
        max-height: 300px;
        overflow-y: auto;
        padding-right: 5px;
    }
    
    .filter-item {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 10px;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 0.9rem;
    }
    
    .filter-item:hover {
        background-color: #f0f0ff;
    }
    
    .filter-item.active {
        background-color: #e6e6ff;
        font-weight: 500;
    }
    
    .filter-item .count {
        margin-left: auto;
        background-color: #e2e2fe;
        border-radius: 12px;
        padding: 2px 8px;
        font-size: 0.75rem;
        color: #4f46e5;
    }
    
    /* Search styling */
    .filter-search {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ddd;
        border-radius: 6px;
        margin-bottom: 10px;
        font-size: 0.9rem;
    }
    
    .filter-search:focus {
        outline: none;
        border-color: #7c4dff;
        box-shadow: 0 0 0 2px rgba(124, 77, 255, 0.2);
    }
    
    /* Reset filters button */
    .reset-filters {
        display: block;
        width: 100%;
        padding: 8px;
        background-color: #f8f8f8;
        border: 1px solid #e0e0e0;
        border-radius: 6px;
        text-align: center;
        margin-top: 10px;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 0.9rem;
    }
    
    .reset-filters:hover {
        background-color: #e8e8e8;
    }
    
    /* Takeaway cards styling */
    .takeaway-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
    }
    
    .takeaway-card {
        background-color: #fff;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        height: 100%;
        display: flex;
        flex-direction: column;
    }
    
    .takeaway-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
    }
    
    .takeaway-card-header {
        height: 140px;
        position: relative;
        overflow: hidden;
    }
    
    .takeaway-card-header img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }
    
    .takeaway-card:hover .takeaway-card-header img {
        transform: scale(1.05);
    }
    
    .takeaway-card-header-content {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        padding: 12px 16px;
        background: linear-gradient(0deg, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%);
        color: white;
    }
    
    .takeaway-card-header h3 {
        margin: 0;
        font-size: 1rem;
        font-weight: 600;
        text-shadow: 0 1px 2px rgba(0,0,0,0.5);
    }
    
    .takeaway-card-header .episode-number {
        font-size: 0.8rem;
        margin-bottom: 4px;
        text-shadow: 0 1px 2px rgba(0,0,0,0.5);
    }
    
    .takeaway-card-body {
        padding: 16px;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }
    
    .takeaway-card-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 6px;
        margin-bottom: 12px;
    }
    
    .takeaway-tag {
        background-color: #f0f0ff;
        color: #4f46e5;
        font-size: 0.75rem;
        padding: 3px 8px;
        border-radius: 12px;
    }
    
    .takeaway-content {
        flex-grow: 1;
    }
    
    .takeaway-content ul {
        padding-left: 5px;
        margin: 0;
        list-style-type: none;
    }
    
    .takeaway-content li {
        margin-bottom: 12px;
        font-size: 0.9rem;
        line-height: 1.5;
        position: relative;
        padding-left: 24px;
    }
    
    .takeaway-content li:before {
        content: "";
        position: absolute;
        left: 0;
        top: 5px;
        width: 10px;
        height: 10px;
        background-color: #7c4dff;
        border-radius: 50%;
        opacity: 0.8;
    }
    
    .takeaway-content li:hover:before {
        background-color: #6366f1;
        transform: scale(1.2);
        transition: all 0.2s ease;
    }
    
    .takeaway-card-footer {
        padding: 12px 16px;
        background-color: #f8f9ff;
        border-top: 1px solid #eee;
        text-align: right;
    }
    
    .takeaway-card-footer a {
        color: #4f46e5;
        text-decoration: none;
        font-size: 0.85rem;
        font-weight: 500;
    }
    
    .takeaway-card-footer a:hover {
        text-decoration: underline;
    }
    
    /* Empty state */
    .empty-state {
        text-align: center;
        padding: 40px 20px;
        background-color: #f8f9ff;
        border-radius: 12px;
        margin: 40px 0;
    }
    
    .empty-state h3 {
        margin-top: 0;
        color: #666;
    }
    
    .empty-state p {
        color: #888;
        max-width: 400px;
        margin: 0 auto;
    }
    
    /* Mobile responsive */
    @media (max-width: 768px) {
        .observations-layout {
            grid-template-columns: 1fr;
        }
        
        .observations-sidebar {
            position: relative;
            height: auto;
            margin-bottom: 20px;
        }
        
        .takeaway-cards {
            grid-template-columns: 1fr;
        }
    }
    
    /* Tab navigation for mobile */
    .mobile-tabs {
        display: none;
        overflow-x: auto;
        white-space: nowrap;
        margin-bottom: 20px;
        padding-bottom: 8px;
        scrollbar-width: none;
    }
    
    .mobile-tabs::-webkit-scrollbar {
        display: none;
    }
    
    .mobile-tab {
        display: inline-block;
        padding: 8px 16px;
        background-color: #f0f0ff;
        border-radius: 20px;
        margin-right: 8px;
        font-size: 0.9rem;
        cursor: pointer;
    }
    
    .mobile-tab.active {
        background-color: #7c4dff;
        color: white;
        font-weight: 500;
    }
    
    @media (max-width: 768px) {
        .mobile-tabs {
            display: block;
        }
    }
</style>

<script>
    // Filter functionality
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('search-input') as HTMLInputElement;
        const filterItems = document.querySelectorAll('.filter-item');
        const takeawayCards = document.querySelectorAll('.takeaway-card') as NodeListOf<HTMLElement>;
        const emptyState = document.getElementById('empty-state') as HTMLElement;
        const resetButton = document.getElementById('reset-filters') as HTMLElement;
        
        let activeFilters = {
            search: '',
            tools: [] as string[],
            episodes: [] as string[]
        };
        
        // Search functionality
        searchInput?.addEventListener('input', function() {
            activeFilters.search = this.value.toLowerCase();
            filterCards();
        });
        
        // Filter item clicks
        filterItems.forEach(item => {
            item.addEventListener('click', function() {
                const filterType = (this as HTMLElement).dataset.filter;
                const filterValue = (this as HTMLElement).dataset.value;
                
                this.classList.toggle('active');
                
                if (filterType === 'tool' && filterValue) {
                    if (this.classList.contains('active')) {
                        activeFilters.tools.push(filterValue);
                    } else {
                        activeFilters.tools = activeFilters.tools.filter(t => t !== filterValue);
                    }
                } else if (filterType === 'episode' && filterValue) {
                    if (this.classList.contains('active')) {
                        activeFilters.episodes.push(filterValue);
                    } else {
                        activeFilters.episodes = activeFilters.episodes.filter(e => e !== filterValue);
                    }
                }
                
                filterCards();
            });
        });
        
        // Reset filters
        resetButton?.addEventListener('click', function() {
            activeFilters = { search: '', tools: [], episodes: [] };
            if (searchInput) searchInput.value = '';
            filterItems.forEach(item => item.classList.remove('active'));
            filterCards();
        });
        
        // Filter cards based on active filters
        function filterCards() {
            let visibleCount = 0;
            
            takeawayCards.forEach(card => {
                let shouldShow = true;
                
                // Search filter
                if (activeFilters.search) {
                    const cardText = card.textContent?.toLowerCase() || '';
                    if (!cardText.includes(activeFilters.search)) {
                        shouldShow = false;
                    }
                }
                
                // Tools filter
                if (activeFilters.tools.length > 0) {
                    const cardTools = (card.dataset.tools || '').split(',');
                    const hasMatchingTool = activeFilters.tools.some(tool => 
                        cardTools.some(cardTool => cardTool.includes(tool))
                    );
                    if (!hasMatchingTool) {
                        shouldShow = false;
                    }
                }
                
                // Episode filter
                if (activeFilters.episodes.length > 0) {
                    const cardEpisode = card.dataset.episode || '';
                    if (!activeFilters.episodes.includes(cardEpisode)) {
                        shouldShow = false;
                    }
                }
                
                if (shouldShow) {
                    card.style.display = 'flex';
                    visibleCount++;
                } else {
                    card.style.display = 'none';
                }
            });
            
            // Show/hide empty state
            if (emptyState) {
                if (visibleCount === 0) {
                    emptyState.style.display = 'block';
                } else {
                    emptyState.style.display = 'none';
                }
            }
        }
    });
</script> 